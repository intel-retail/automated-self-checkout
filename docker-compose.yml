#
# Copyright (C) 2023 Intel Corporation.
#
# SPDX-License-Identifier: Apache-2.0
#


 ## Current Developer Toolbox doesn't support environment files, make sure to remove any files or environment variables starting with $
version: '3.7'
services:
  camera-simulator:
    container_name: camera-simulator
    image: aler9/rtsp-simple-server
    ports:
      - "127.0.0.1:8554:8554"
  camera-simulator0:
    build:
      context: .
    image: openvino/ubuntu20_data_runtime:2021.4.2
    container_name: camera-simulator0
    network_mode: "host"
    entrypoint: ffmpeg
    command: "
        -nostdin
        -re -stream_loop -1
        -i /home/pipeline-server/sample-media/coca-cola-4465029-3840-15-bench.mp4
        -c copy
        -f rtsp
        -rtsp_transport
        tcp
        rtsp://localhost:8554/camera_0
        "
    depends_on:
      - camera-simulator
    volumes:
      - ./sample-media:/home/pipeline-server/sample-media
  camera-simulator1:
    build:
      context: .
    image: openvino/ubuntu20_data_runtime:2021.4.2
    container_name: camera-simulator1
    network_mode: "host"
    entrypoint: ffmpeg
    command: "
        -nostdin
        -re -stream_loop -1
        -i /home/pipeline-server/sample-media/vehicle-bike-1920-15-bench.mp4
        -c copy
        -f rtsp
        -rtsp_transport
        tcp
        rtsp://localhost:8554/camera_1
        "
    depends_on:
      - camera-simulator
    volumes:
      - ./sample-media:/home/pipeline-server/sample-media
  camera-simulator2:
    build:
      context: .
    image: openvino/ubuntu20_data_runtime:2021.4.2
    container_name: camera-simulator2
    network_mode: "host"
    entrypoint: ffmpeg
    command: "
        -nostdin
        -re -stream_loop -1
        -i /home/pipeline-server/sample-media/video_of_people_walking_855564-1920-15-bench.mp4
        -c copy
        -f rtsp
        -rtsp_transport
        tcp
        rtsp://localhost:8554/camera_2
        "
    depends_on:
      - camera-simulator
    volumes:
      - ./sample-media:/home/pipeline-server/sample-media
  OvmsServer:
    image: openvino/model_server:2023.1-gpu
    container_name: ovms-server0
    restart: always
    ports:
      - '9001:9001'
      - '9002:9002'
    command: 
      - '--config_path'
      - '/models/config.json'
      - '--port'
      - '9001'              
      - '--rest_port'
      - '9002'
      - '--log_level'
      - 'INFO'
    volumes:
      - ./configs/opencv-ovms/models/2022:/models
    environment:
      - DEVICE=CPU update_config:dev
      - PLATFORM="core"
      - server_cl_cache_dir=/home/pipeline-server/.cl-cache   
  OvmsClient0:
    image: python-demo:dev
    container_name: object-detection0
    network_mode: "host"
    entrypoint: /opencv-ovms/scripts/docker_compose_generic_entrypoint.sh
    environment:
      - CONTAINER_NAME="object-detection0"
      - GRPC_PORT=9001
      - INPUTSRC=rtsp://localhost:8554/camera_1
      - cid_count=0
      - DETECTION_MODEL_NAME=ssd_mobilenet_v1_coco
      - DETECTION_LABEL_FILE=coco_91cl_bkgr.txt
      - DETECTION_ARCHITECTURE_TYPE=ssd
      - DETECTION_OUTPUT_RESOLUTION=1280x720
      - DETECTION_THRESHOLD=0.50
      - RENDER_MODE=1 #RENDER_MODE=1 will work only after running xhost +local:docker
      - DISPLAY=$DISPLAY
      - ENTRYPOINT_SCRIPT=/opencv-ovms/demos/object_detection/python/entrypoint.sh
    depends_on:
      - OvmsServer
    volumes:
      - ./configs/opencv-ovms:/opencv-ovms
      - ./results:/tmp/results   
      - ~/.Xauthority:/home/dlstreamer/.Xauthority
      - /tmp/.X11-unix
  OvmsClient1:
    image: python-demo:dev
    container_name: object-detection1
    network_mode: "host"
    entrypoint: /opencv-ovms/scripts/docker_compose_generic_entrypoint.sh
    environment:
      - CONTAINER_NAME="object-detection1"
      - GRPC_PORT=9001
      - INPUTSRC=rtsp://localhost:8554/camera_2
      - cid_count=1
      - DETECTION_MODEL_NAME=ssd_mobilenet_v1_coco
      - DETECTION_LABEL_FILE=coco_91cl_bkgr.txt
      - DETECTION_ARCHITECTURE_TYPE=ssd
      - DETECTION_OUTPUT_RESOLUTION=1280x720
      - DETECTION_THRESHOLD=0.50
      - RENDER_MODE=1  #RENDER_MODE=1 will work only after running xhost +local:docker
      - DISPLAY=$DISPLAY
      - ENTRYPOINT_SCRIPT=/opencv-ovms/demos/object_detection/python/entrypoint.sh
    depends_on:
      - OvmsServer
    volumes:
      - ./configs/opencv-ovms:/opencv-ovms
      - ./results:/tmp/results   
      - ~/.Xauthority:/home/dlstreamer/.Xauthority
      - /tmp/.X11-unix
  OvmsClient_classification2:
    image: python-demo:dev
    container_name: classification2
    network_mode: "host"
    entrypoint: /opencv-ovms/scripts/docker_compose_generic_entrypoint.sh
    environment:
      - CONTAINER_NAME="classification2"
      - GRPC_PORT=9001
      - INPUTSRC=rtsp://localhost:8554/camera_0
      - cid_count=2
      - CLASSIFICATION_MODEL_NAME=efficientnetb0_FP32INT8
      - CLASSIFICATION_LABEL_FILE=imagenet_2012.txt
      - CLASSIFICATION_OUTPUT_RESOLUTION=1280x720
      - RENDER_MODE=1 #RENDER_MODE=1 will work only after running xhost +local:docker
      - DISPLAY=$DISPLAY
      - ENTRYPOINT_SCRIPT=/opencv-ovms/demos/classification/python/entrypoint.sh
    depends_on:
      - OvmsServer
    volumes:
      - ./configs/opencv-ovms:/opencv-ovms
      - ./results:/tmp/results  
      - ~/.Xauthority:/home/dlstreamer/.Xauthority
      - /tmp/.X11-unix
  # To Start more Clients Copy the below code and replace ## with count number
  # Ensure RENDER_MODE is set as the env variable (0 or 1), RENDER_MODE=1 will work only after running `xhost +local:docker`
  #  RENDER_MODE=1 will not work on Devleoper Toolbox
  # Add all the env variables from the pipeline env file here (located under configs/opencv-ovms/envs)
  #OvmsClient_pipelineType##:  #Change pipeline type and count here
    #image: python-demo:dev
    #container_name: pipelineType##  #Change pipeline type and count here
    #network_mode: "host"
    #entrypoint: /opencv-ovms/demos/pipelineType/python/entrypoint.sh  #Change pipeline type here
    #environment:
    #  - CONTAINER_NAME="pipelineType##" #Change pipeline type and count here
    #  - GRPC_PORT=9001
    #  - INPUTSRC=rtsp://localhost:8554/camera_0
    #  - cid_count=## #Change count here
    #  - RENDER_MODE=1 #RENDER_MODE=1 will work only after running xhost +local:docker
    #  - DISPLAY=$DISPLAY
    #  - ENTRYPOINT_SCRIPT=/opencv-ovms/demos/classification/python/entrypoint.sh
    #depends_on:
    #  - ovms-server0
    #volumes:
    #  - ./configs/opencv-ovms:/opencv-ovms
    #  - ./results:/tmp/results   
    #  - ~/.Xauthority:/home/dlstreamer/.Xauthority
    #  - /tmp/.X11-unix
