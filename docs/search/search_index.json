{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Intel\u00ae Automated Self-Checkout Reference Package","text":""},{"location":"index.html#overview","title":"Overview","text":"<p>As Computer Vision becomes more and more mainstream, especially for industrial &amp; retail use cases, development and deployment of these solutions becomes more challenging. Vision workloads are large and complex and need to go through many stages. For instance, in the pipeline below, the video data is ingested, pre-processed before each inferencing step, inferenced using two models - YOLOv5 and EfficientNet, and post processed to generate metadata and show the bounding boxes for each frame. This pipeline is just an example of the supported models and pipelines found within this reference.</p> <p></p> <p>Automated self-checkout solutions are complex, and retailers, independent software vendors (ISVs), and system integrators (SIs) require a good understanding of hardware and software, the costs involved in setting up and scaling the system, and the configuration that best suits their needs. Vision workloads are significantly larger and require systems to be architected, built, and deployed with several considerations. Hence, a set of ingredients needed to create an automated self-checkout solution is necessary. More details are available on the Intel Developer Focused Webpage and on this LinkedIn Blog</p> <p>The Intel\u00ae Automated Self-Checkout Reference Package provides critical components required to build and deploy a self-checkout use case using Intel\u00ae hardware, software, and other open-source software. This reference implementation provides a pre-configured automated self-checkout pipeline that is optimized for Intel\u00ae hardware. </p>"},{"location":"index.html#next-steps","title":"Next Steps","text":"<p>To begin using the automated self-checkout solution you can follow the Getting Started Guide. </p>"},{"location":"index.html#releases","title":"Releases","text":"<p>For the project release notes, refer to the GitHub* Repository.</p>"},{"location":"index.html#license","title":"License","text":"<p>This project is Licensed under an Apache License.</p>"},{"location":"LICENSE.html","title":"LICENSE","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright 2023 Intel Corporation</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"advanced.html","title":"Advanced Settings","text":""},{"location":"advanced.html#applying-ev-to-run-pipeline","title":"Applying EV to Run Pipeline","text":"<p>EV can be applied in two ways:</p> <pre><code>1. as parameter input to run.sh script\n2. in the env files\n</code></pre> <p>The input parameter will override the one in the env files if both are used.</p>"},{"location":"advanced.html#run-with-custom-environment-variables","title":"Run with custom environment variables","text":"<p>Environment variables with make commands</p> <p>Example</p> <pre><code>make PIPELINE_SCRIPT=yolov5s.sh ENV_FILE=src/res/yolov5-cpu.env run-render-mode\n</code></pre> <p>Environment variable with docker compose up</p> <p>Example</p> <pre><code>RENDER_MODE=0 PIPELINE_SCRIPT=yolov5s.sh PIPELINE_COUNT=1 RETAIL_USE_CASE_ROOT=\"..\" RESULTS_DIR=\"../results\" docker compose -f src/docker-compose.yml --env-file src/res/yolov5-gpu.env up -d\n</code></pre> <p>Note</p> <pre><code>The environment variables set like this are known as command line environment overrides and are applied to this run only.\nThey will override the default values in env files and docker-compose.yml.\n</code></pre>"},{"location":"advanced.html#editing-the-environment-files","title":"Editing the Environment Files","text":"<p>Environment variable files can be used to persist environment variables between deployments. There are three environment variables files with our default environment variables for Automated Self Checkout.</p> <pre><code>    - `src/gst.env` file for shared environment variables\n    - `src/yolov5-cpu.env` file for running pipeline in on cpu only\n    - `src/yolov5-gpu.env` file for running pipeline in gpu or mixed CPU/GPU\n</code></pre> <p>After modifying or creating a new .env file you can load the .env file through docker compose up</p> <p>Example</p> <pre><code>RENDER_MODE=0 PIPELINE_SCRIPT=yolov5s.sh PIPELINE_COUNT=1 RETAIL_USE_CASE_ROOT=\"..\" RESULTS_DIR=\"../results\" docker compose -f src/docker-compose.yml --env-file src/res/yolov5-gpu.env up -d\n</code></pre>"},{"location":"advanced.html#environment-variables-evs","title":"Environment Variables (EVs)","text":"<p>The table below lists the environment variables (EVs) that can be used as inputs for the container running the inferencing pipeline.</p> Docker Compose EVsCommon EVsAutomated Self Checkout DLStreamer EVs <p>This list of EVs is for running through the make file or docker compose up</p> Variable Description Values <code>DOCKER_COMPOSE</code> The docker-compose.yml file to run src/docker-compose.yml <code>RETAIL_USE_CASE_ROOT</code> The root directory for Automated Self Checkout in relation to the docker-compose.yml .. <code>RESULTS_DIR</code> Dirtectory to output results ../results <code>ENV_FILE</code> Path to additional env files to load into the docker-compose.yml src/res/yolov5-gpu.env <p>This list of EVs is common for all profiles.</p> Variable Description Values <code>BARCODE_RECLASSIFY_INTERVAL</code> time interval in seconds for barcode classification Ex: 5 <code>BATCH_SIZE</code> number of frames batched together for a single inference to be used in gvadetect batch-size element 0, 1 <code>CLASSIFICATION_OPTIONS</code> extra classification pipeline instruction parameters \"\", \"reclassify-interval=1 batch-size=1 nireq=4 gpu-throughput-streams=4\" <code>DETECTION_OPTIONS</code> extra object detection pipeline instruction parameters \"\", \"gpu-throughput-streams=4 nireq=4 batch-size=1\" <code>GST_DEBUG</code> for running pipeline in gst debugging mode 0, 1 <code>LOG_LEVEL</code> log level to be set when running gst pipeline ERROR, INFO, WARNING, and more <code>OCR_RECLASSIFY_INTERVAL</code> time interval in seconds for OCR classification Ex: 5 <code>RENDER_MODE</code> for displaying pipeline and overlay CV metadata 1, 0 <code>PIPELINE_COUNT</code> Number of Automated Self Checkout Docker container instances to launch Ex: 1 <code>PIPELINE_SCRIPT</code> Pipeline script to run. yolov5s.sh, yolov5s_effnetb0.sh, yolov5s_full.sh <p>This list of EVs specifically supports the GST profile DLStreamer workloads.</p> Variable Description Values <code>DECODE</code> decoding element instructions for gst-launch to use Ex: \"decode bin force-sw-decoders=1\" <code>DEVICE</code> for setting device to use for pipeline run \"GPU\", \"CPU\", \"AUTO\", \"MULTI:GPU,CPU\" <code>OCR_DEVICE</code> optical character recognition device \"CPU\", \"GPU\" <code>PRE_PROCESS</code> pre process command to add for inferencing \"pre-process-backend=vaapi-surface-sharing\", \"pre-process-backend=vaapi-surface-sharing pre-process-config=VAAPI_FAST_SCALE_LOAD_FACTOR=1\" <code>VA_SURFACE</code> use video analytics surface from the shared memory if applicable \"\", \"! \"video/x-raw(memory"},{"location":"getting_started.html","title":"Getting Started","text":""},{"location":"getting_started.html#step-by-step-instructions","title":"Step by step instructions:","text":"<ol> <li> <p>Download the models using download_models/downloadModels.sh <pre><code>make download-models\n</code></pre></p> </li> <li> <p>Update github submodules <pre><code>make update-submodules\n</code></pre></p> </li> <li> <p>Download sample videos used by the performance tools <pre><code>make download-sample-videos\n</code></pre></p> </li> <li> <p>Build the demo Docker image <pre><code>make build\n</code></pre></p> </li> <li> <p>Start Automated Self Checkout using the Docker Compose file. The Docker Compose also includes an RTSP camera simulator that will infinitely loop through the sample videos downloaded in step 3. <pre><code>make run-render-mode\n</code></pre></p> </li> <li> <p>Verify results</p> <p>After starting Automated Self Checkout you will begin to see result files being written into the results/ directory. Here are example outputs from the 3 log files.</p> <p>gst-launch__gst.log <pre><code>/GstPipeline:pipeline0/GstGvaWatermark:gvawatermark0/GstCapsFilter:capsfilter1: caps = video/x-raw(memory:VASurface), format=(string)RGBA\n/GstPipeline:pipeline0/GstFPSDisplaySink:fpsdisplaysink0/GstXImageSink:ximagesink0: sync = true\nGot context from element 'vaapipostproc1': gst.vaapi.Display=context, gst.vaapi.Display=(GstVaapiDisplay)\"\\(GstVaapiDisplayGLX\\)\\ vaapidisplayglx0\", gst.vaapi.Display.GObject=(GstObject)\"\\(GstVaapiDisplayGLX\\)\\ vaapidisplayglx0\";\nProgress: (open) Opening Stream\nPipeline is PREROLLED ...\nPrerolled, waiting for progress to finish...\nProgress: (connect) Connecting to rtsp://localhost:8554/camera_0\nProgress: (open) Retrieving server options\nProgress: (open) Retrieving media info\nProgress: (request) SETUP stream 0\n</code></pre> <p>pipeline_gst.log <pre><code>14.58\n14.58\n15.47\n15.47\n15.10\n15.10\n14.60\n14.60\n14.88\n14.88\n</code></pre> <p>r_gst.jsonl <pre><code>{\"resolution\":{\"height\":1080,\"width\":1920},\"timestamp\":1}\n{\"objects\":[{\"detection\":{\"bounding_box\":{\"x_max\":1.0,\"x_min\":0.7868695002029238,\"y_max\":0.8493015899134377,\"y_min\":0.4422388975124676},\"confidence\":0.7139435410499573,\"label\":\"person\",\"label_id\":0},\"h\":440,\"region_id\":486,\"roi_type\":\"person\",\"w\":409,\"x\":1511,\"y\":478}],\"resolution\":{\"height\":1080,\"width\":1920},\"timestamp\":66661013}\n{\"objects\":[{\"detection\":{\"bounding_box\":{\"x_max\":1.0,\"x_min\":0.6974737628926411,\"y_max\":0.8381138710318847,\"y_min\":0.44749696271196093},\"confidence\":0.7188630104064941,\"label\":\"person\",\"label_id\":0},\"h\":422,\"region_id\":576,\"roi_type\":\"person\",\"w\":581,\"x\":1339,\"y\":483}],\"resolution\":{\"height\":1080,\"width\":1920},\"timestamp\":133305076}\n</code></pre> <li> <p>Stop the demo using docker compose down <pre><code>make down\n</code></pre></p> </li>"},{"location":"getting_started.html#proceed-to-advanced-settings","title":"Proceed to Advanced Settings","text":""},{"location":"performance.html","title":"Performance Testing","text":"<p>The performance tools repository is included as a github submodule in this project. The performance tools enable you to test the pipeline system performance on various hardware. </p>"},{"location":"performance.html#benchmark-specific-number-of-pipelines","title":"Benchmark specific number of pipelines","text":"<p>You can launch a specific number of Automated Self Checkout containers using the PIPELINE_COUNT environment variable. Default is to launch One yolov5s_full.sh pipeline. You can override these values through Environment Variables.</p> <pre><code>make benchmark\n</code></pre> <pre><code>make PIPELINE_SCRIPT=yolov5s.sh PIPELINE_COUNT=2 benchmark \n</code></pre> <p>Alternatively you can directly call the benchmark.py. This enables you to take advantage of all performance tools parameters. More details about the performance tools can be found HERE</p> <pre><code>cd performance-tools/benchmark-scripts &amp;&amp; PIPELINE_SCRIPT=yolov5s.sh python benchmark.py --compose_file ../../src/docker-compose.yml --pipeline 2\n</code></pre>"},{"location":"performance.html#benchmark-stream-density","title":"Benchmark Stream Density","text":"<p>To test the maximum amount of Automated Self Checkout containers that can run on a system you can use the TARGET_FPS environment variable. Default is to find the container threshold over FPS over 14.95 with the yolov5s_full.sh pipeline. You can override these values through Environment Variables.</p> <pre><code>make benchmark-stream-density\n</code></pre> <pre><code>make PIPELINE_SCRIPT=yolov5s.sh TARGET_FPS=13.5 benchmark-stream-density\n</code></pre> <p>Alternatively you can directly call the benchmark.py. This enables you to take advantage of all performance tools parameters. More details about the performance tools can be found HERE</p> <pre><code>cd performance-tools/benchmark-scripts &amp;&amp; PIPELINE_SCRIPT=yolov5s.sh python benchmark.py --compose_file ../../src/docker-compose.yml --target_fps 14\n</code></pre>"}]}