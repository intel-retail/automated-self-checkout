#
# Copyright (C) 2024 Intel Corporation.
#
# SPDX-License-Identifier: Apache-2.0
#


 ## Current Developer Toolbox doesn't support environment files, make sure to remove any files or environment variables starting with $
version: '3.7'
networks:
  checkout-network:
    driver: bridge
services:
  camera-simulator:
    container_name: camera-simulator
    image: aler9/rtsp-simple-server
    ipc: "none"
    ports:
      - "8555:8554"
    environment:
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      no_proxy: ${no_proxy}
    networks:
      checkout-network: {}
  camera-simulator0:
    image: jrottenberg/ffmpeg:4.1-alpine
    container_name: camera-simulator0
    entrypoint: ["/bin/sh","-c"]
    command: 
    - | 
       if [ ! -f /home/pipeline-server/sample-media/coca-cola-4465029-1920-15-bench.mp4 ]; then
          mkdir -p /home/pipeline-server/sample-media
          wget -O /home/pipeline-server/sample-media/coca-cola-4465029-1920-15-bench.mp4 https://www.pexels.com/download/video/4465029
       fi
       ffmpeg -nostdin -re -stream_loop -1 -i /home/pipeline-server/sample-media/coca-cola-4465029-1920-15-bench.mp4 -c copy -f rtsp -rtsp_transport tcp rtsp://camera-simulator:8554/camera_0
    depends_on:
      - camera-simulator
    volumes:
      - ${RETAIL_USE_CASE_ROOT:-..}/performance-tools/sample-media:/home/pipeline-server/sample-media
    networks:
      checkout-network: {}
  camera-simulator1:
    image: jrottenberg/ffmpeg:4.1-alpine
    container_name: camera-simulator1
    entrypoint: ["/bin/sh","-c"]
    command: 
    - | 
       if [ ! -f /home/pipeline-server/sample-media/barcode-1920-15-bench.mp4 ]; then
          mkdir -p /home/pipeline-server/sample-media
          wget -O /home/pipeline-server/sample-media/barcode-1920-15-bench.mp4 https://github.com/antoniomtz/sample-clips/raw/main/barcode.mp4
       fi
       ffmpeg -nostdin -re -stream_loop -1 -i /home/pipeline-server/sample-media/barcode-1920-15-bench.mp4 -c copy -f rtsp -rtsp_transport tcp rtsp://camera-simulator:8554/camera_1
    depends_on:
      - camera-simulator
    volumes:
      - ${RETAIL_USE_CASE_ROOT:-..}/performance-tools/sample-media:/home/pipeline-server/sample-media
    networks:
      checkout-network: {}
  camera-simulator2:
    image: jrottenberg/ffmpeg:4.1-alpine
    container_name: camera-simulator2
    entrypoint: ["/bin/sh","-c"]
    command: 
    - | 
       if [ ! -f /home/pipeline-server/sample-media/vehicle-bike-1920-15-bench.mp4 ]; then
          mkdir -p /home/pipeline-server/sample-media
          wget -O /home/pipeline-server/sample-media/vehicle-bike-1920-15-bench.mp4 https://www.pexels.com/download/video/853908
       fi
       ffmpeg -nostdin -re -stream_loop -1 -i /home/pipeline-server/sample-media/vehicle-bike-1920-15-bench.mp4 -c copy -f rtsp -rtsp_transport tcp rtsp://camera-simulator:8554/camera_2
    depends_on:
      - camera-simulator
    volumes:
      - ${RETAIL_USE_CASE_ROOT:-..}/performance-tools/sample-media:/home/pipeline-server/sample-media
    networks:
      checkout-network: {}

  evamclient:
    container_name: edge-video-analytics-microservice
    image: intel/edge_video_analytics_microservice:2.0.0
    ports:
      - ${EVAM_PORT}:${EVAM_PORT}
    environment:
      ENABLE_WEBRTC: true
      WEBRTC_SIGNALING_SERVER: ws://localhost:8443
      RUN_MODE: EVA 
      DETECTION_DEVICE: CPU
      CLASSIFICATION_DEVICE: CPU
      EMIT_SOURCE_AND_DESTINATION: true
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      no_proxy: ${no_proxy},${RTSP_CAMERA_IP}
    env_file:
      - .env
    volumes:
      - ${RETAIL_USE_CASE_ROOT:-..}/src/extensions:/home/pipeline-server/gvapython
      - ${RETAIL_USE_CASE_ROOT:-../..}/models:/home/pipeline-server/models
      - ${RETAIL_USE_CASE_ROOT:-..}/src/pipeline-server/asc:/home/pipeline-server/pipelines
      - "${RETAIL_USE_CASE_ROOT:-..}/src/pipeline-server/config.json:/home/pipeline-server/config.json"
    network_mode: host

  pipeline-init:
    image: postman/newman
    container_name: pipeline-init
    command: run /postman/pipeline.json -e "/postman/env.json" --verbose
    environment:
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      no_proxy: ${no_proxy}
    volumes:
      - ./postman/:/postman
    network_mode: host

  mqtt-broker:
    command:
      - /usr/sbin/mosquitto
      - -c
      - /mosquitto-no-auth.conf
    container_name: mqtt-broker
    hostname: mqtt-broker
    image: eclipse-mosquitto:2.0.18
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 1883
        published: "1883"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
    networks:
      checkout-network: {}

  multimodal-data-visualization-streaming:
    image: intel/multimodal-data-visualization-streaming:5.0.0
    container_name: multimodal-data-visualization-streaming
    ipc: "none"
    tmpfs:
      - /etc/nginx/sites-enabled:uid=1999,gid=1999
      - /usr/share/nginx:uid=1999,gid=1999
      - /var/log/nginx:uid=1999,gid=1999
      - /var/cache/nginx:uid=1999,gid=1999
      - /var/lib/nginx:uid=1999,gid=1999
      - /run:uid=1999,gid=1999
    security_opt:
      - no-new-privileges
    environment:
      MODE: "EVA"
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      no_proxy: ${no_proxy}
      AppName: "MultiModalVisualizationStreaming"
      LSHOST: host.docker.internal
      LSFEATURE_NAME: "MultiModalVisStreaming"
      RUNTIME_LICENSE_CHECK_FREQ_SECS: ${RUNTIME_LICENSE_CHECK_FREQ_SECS}
      APPLICATION_RESTART_FREQ_SECS: ${APPLICATION_RESTART_FREQ_SECS}
    healthcheck:
      test: [ "CMD-SHELL", "exit", "0" ]
      interval: 5m
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 1024M
      restart_policy: 
        condition: on-failure
        max_attempts: 5          
    env_file:
      - .env
    ports:
      - ${EVA_DEFAULT_PORT}:${EVA_DEFAULT_PORT}
      - ${EVA_REACT_PORT}:${EVA_REACT_PORT}
    network_mode: host

  multimodal-data-visualization:
    image: intel/multimodal-data-visualization:5.0.0
    container_name: multimodal-data-visualization
    ipc: "none"
    security_opt:
    - no-new-privileges
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: 5m
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 1024M
      restart_policy: 
        condition: on-failure
        max_attempts: 5          
    volumes:
       - "vol_temp_grafana:/tmp"
       - ${RETAIL_USE_CASE_ROOT:-..}/src/pipeline-server/grafana:/app/eva
    environment:
      HOST_IP: ${HOST_IP}
      MODE: "EVA"
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      no_proxy: ${no_proxy}
      GRAFANA_SERVER: ${GRAFANA_SERVER}
      AppName: "MultiModalVisualization"
      LSFEATURE_NAME: "MultiModalVisualization"
      LSHOST: host.docker.internal
      RUNTIME_LICENSE_CHECK_FREQ_SECS: ${RUNTIME_LICENSE_CHECK_FREQ_SECS}
      APPLICATION_RESTART_FREQ_SECS: ${APPLICATION_RESTART_FREQ_SECS}
      GRAFANA_DATA_PATH: "/tmp/grafana/lib/grafana"
      GRAFANA_LOGS_PATH: "/tmp/grafana/log/grafana"
      GRAFANA_PLUGINS_PATH: "/tmp/grafana/lib/grafana/plugins"
      GF_PATHS_DATA: "/tmp/grafana/lib/grafana"
      GF_PATHS_LOGS: "/tmp/grafana/log/grafana"
      GF_PATHS_PLUGINS: "/tmp/grafana/lib/grafana/plugins"
      GF_PATHS_PROVISIONING: "/tmp/grafana/conf/provisioning"
    env_file:
      - .env
    ports:
      - ${GRAFANA_PORT}:${GRAFANA_PORT}
    network_mode: host
  
  webrtc-signaling-server:
    image: intel/simple-signaling-server:4.0.3
    container_name: webrtc-signaling-server
    read_only: true
    environment:
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      no_proxy: ${no_proxy}
    ipc: "none"
    security_opt:
    - no-new-privileges
    network_mode: host
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: 5m
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 1024M
      restart_policy: 
        condition: on-failure
        max_attempts: 5          
    env_file:
      - .env
    ports:
      - ${SIGNALLING_PORT}:${SIGNALLING_PORT}

volumes:
  vol_temp_grafana:
    name: "visualization_grafana_vol"
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
